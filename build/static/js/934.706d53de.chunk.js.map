{"version":3,"file":"static/js/934.706d53de.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.js","services/MoviesAPI.js","components/NotFound/NotFound.js","webpack://goit-react-hw-05-movies/./src/components/Search/Search.module.css?06df","components/Search/Search.js","webpack://goit-react-hw-05-movies/./src/components/LoadMoreButton/Button.module.css?2ca9","components/LoadMoreButton/LoadMoreButton.js","views/MoviesPage/MoviesPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieList_list__0fwot\",\"listItem\":\"MovieList_listItem__TvXoB\",\"title\":\"MovieList_title__4inTF\"};","import { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './MovieList.module.css';\r\n\r\nconst MovieList = ({ movies, location }) => {\r\n  return (\r\n    <ul className={styles.list}>\r\n      {movies.map(({ id, original_title, poster_path, name }) => (\r\n        <li key={id} className={styles.listItem}>\r\n          <Link\r\n            to={{\r\n              pathname: `/movies/${id}`,\r\n              state: { from: location },\r\n            }}\r\n          >\r\n            {\r\n              <>\r\n                <div>\r\n                  <img\r\n                    src={`https://image.tmdb.org/t/p/w500${poster_path}`}\r\n                    alt={original_title}\r\n                    title={original_title}\r\n                    width=\"360\"\r\n                    height=\"450\"\r\n                  />\r\n                </div>\r\n                <h2 className={styles.title}>\r\n                  {original_title}\r\n                  {name}\r\n                </h2>\r\n              </>\r\n            }\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nMovieList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      title: PropTypes.string,\r\n      poster_path: PropTypes.string,\r\n    }),\r\n  ),\r\n  location: PropTypes.object,\r\n};\r\n\r\nexport default MovieList;\r\n","import axios from 'axios';\r\nconst API_KEY = 'ec54c0409f7f71b36a33826187600e03';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\nasync function fetchWithErrorHandling(url = '', config = {}) {\r\n  const response = await fetch(url, config);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error('Not found'));\r\n}\r\n\r\nexport function fetchMovies() {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}`,\r\n  );\r\n}\r\n\r\nexport async function fetchMovieById(movieId) {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`,\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.log('===ERROR===', error);\r\n  }\r\n}\r\n\r\nexport function fetchMoviesBySearch(searchQuery, currentPage) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}&page=${currentPage}&language=en-US`,\r\n  );\r\n}\r\n\r\nexport function fetchCast(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`,\r\n  );\r\n}\r\n\r\nexport function fetchReviews(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&page=1`,\r\n  );\r\n}\r\n","export default function NotFound() {\r\n  return <h1>404 Страница не найдена...</h1>;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Search_searchbar__UdhWs\",\"form\":\"Search_form__OWDwB\",\"button\":\"Search_button__7MQig\",\"buttonlabel\":\"Search_buttonlabel__hmTMi\",\"input\":\"Search_input__899ew\"};","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CgSearch } from 'react-icons/cg';\r\nimport { IconContext } from 'react-icons';\r\nimport NotFound from '../NotFound/NotFound';\r\nimport styles from './Search.module.css';\r\n\r\nconst SearchBar = ({ onSubmit }) => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const handleSubmitChange = event => {\r\n    setSearchQuery(event.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const message = { message: 'Enter a query' };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (searchQuery.trim() === '') {\r\n      NotFound(message);\r\n      return;\r\n    }\r\n\r\n    onSubmit(searchQuery);\r\n    setSearchQuery('');\r\n  };\r\n\r\n  return (\r\n    <header className={styles.searchbar}>\r\n      <form onSubmit={handleSubmit} className={styles.form}>\r\n        <button type=\"submit\" className={styles.button}>\r\n          <IconContext.Provider value={{ color: 'ffffff', size: '2em' }}>\r\n            <div className={styles.buttonLabel}>\r\n              <CgSearch />\r\n            </div>\r\n          </IconContext.Provider>\r\n        </button>\r\n\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          // autocomplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search films\"\r\n          name=\"searchQuery\"\r\n          value={searchQuery}\r\n          onChange={handleSubmitChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchBar;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__B3u-F\"};","import propTypes from 'prop-types';\r\nimport styles from './Button.module.css';\r\n\r\nconst Button = ({ onClick }) => (\r\n  <button onClick={onClick} className={styles.button}>\r\n    load more\r\n  </button>\r\n);\r\n\r\nButton.propTypes = {\r\n  onClick: propTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import { useEffect, useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport Search from '../../components/Search/Search';\r\nimport * as MoviesAPI from '../../services/MoviesAPI';\r\n\r\nimport MovieList from '../../components/MovieList/MovieList';\r\nimport LoadMoreButton from '../../components/LoadMoreButton/LoadMoreButton';\r\nimport Loader from '../../components/Loader/Loader';\r\nimport NotFound from '../../components/NotFound/NotFound';\r\n\r\nconst MoviesPage = () => {\r\n  let navigation = useNavigate();\r\n  const location = useLocation();\r\n  const query = new URLSearchParams(location.search).get('query');\r\n\r\n  const [searchQuery, setSearchQuery] = useState(query || '');\r\n  const [currentPage, setCurrentPage] = useState('1');\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!searchQuery) return;\r\n\r\n    const getMovies = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const { results } = await MoviesAPI.fetchMoviesBySearch(\r\n          searchQuery,\r\n          currentPage,\r\n        );\r\n\r\n        if (results.length === 0) {\r\n          alert('Nothing found');\r\n        }\r\n\r\n        setMovies(prev => [...prev, ...results]);\r\n        setLoading(true);\r\n        if (currentPage !== 1) {\r\n          scrollOnLoadButton();\r\n        }\r\n      } catch (error) {\r\n        setError(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getMovies();\r\n  }, [currentPage, searchQuery]);\r\n\r\n  const handleOnSubmit = searchQuery => {\r\n    setMovies([]);\r\n    setSearchQuery(searchQuery);\r\n    setCurrentPage(1);\r\n    setError(null);\r\n\r\n    navigation({\r\n      ...location,\r\n      search: `query=${searchQuery}`,\r\n    });\r\n  };\r\n\r\n  const scrollOnLoadButton = () => {\r\n    window.scrollTo({\r\n      top: document.documentElement.scrollHeight,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  const handleLoadMore = () => {\r\n    setCurrentPage(prevState => prevState + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Search onSubmit={handleOnSubmit} />\r\n      {movies && movies.length > 0 && (\r\n        <MovieList movies={movies} location={location} />\r\n      )}\r\n      {isLoading === false && movies.length >= 12 && (\r\n        <LoadMoreButton onClick={handleLoadMore} />\r\n      )}\r\n      {isLoading && <Loader />}\r\n      {error && <NotFound message={error.message} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MoviesPage;\r\n"],"names":["movies","location","className","styles","map","id","original_title","poster_path","name","to","pathname","state","from","src","alt","title","width","height","API_KEY","BASE_URL","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchMovies","fetchMovieById","movieId","axios","data","console","log","fetchMoviesBySearch","searchQuery","currentPage","fetchCast","fetchReviews","NotFound","onSubmit","useState","setSearchQuery","event","preventDefault","trim","type","value","color","size","autoFocus","placeholder","onChange","currentTarget","toLowerCase","onClick","navigation","useNavigate","useLocation","query","URLSearchParams","search","get","setCurrentPage","setMovies","error","setError","isLoading","setLoading","useEffect","getMovies","MoviesAPI","results","length","alert","prev","scrollOnLoadButton","window","scrollTo","top","document","documentElement","scrollHeight","behavior","Search","MovieList","LoadMoreButton","prevState","Loader","message"],"sourceRoot":""}